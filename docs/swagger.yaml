definitions:
  controller.AssociateProductRequest:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  controller.CreateAddressRequest:
    properties:
      city:
        type: string
      complement:
        type: string
      neighborhood:
        type: string
      number:
        minLength: 0
        type: string
      state:
        type: string
      street:
        type: string
      zipCode:
        type: string
    required:
    - city
    - neighborhood
    - number
    - state
    - street
    - zipCode
    type: object
  controller.CreateOrderRequest:
    properties:
      products:
        items:
          $ref: '#/definitions/controller.AssociateProductRequest'
        type: array
      userId:
        type: integer
    type: object
  controller.CreateProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      tags:
        items:
          type: string
        type: array
    required:
    - description
    - name
    - price
    type: object
  controller.CreateUserRequest:
    properties:
      address:
        $ref: '#/definitions/controller.CreateAddressRequest'
      paymentMethod:
        $ref: '#/definitions/model.PaymentMethod'
    required:
    - address
    - paymentMethod
    type: object
  controller.ErrorResponse:
    properties:
      errorCode:
        type: integer
      message:
        type: string
    type: object
  controller.ListOrdersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controller.ShowOrderResponse'
        type: array
    type: object
  controller.ListProductsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controller.ShowProductResponse'
        type: array
    type: object
  controller.ListUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controller.ShowUserResponse'
        type: array
    type: object
  controller.ShowOrderResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: number
      tags:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  controller.ShowProductResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: number
      tags:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  controller.ShowUserResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: number
      tags:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  controller.UpdateAddressRequest:
    properties:
      city:
        type: string
      complement:
        type: string
      neighborhood:
        type: string
      number:
        minLength: 0
        type: string
      state:
        type: string
      street:
        type: string
      zipCode:
        type: string
    required:
    - city
    - neighborhood
    - number
    - state
    - street
    - zipCode
    type: object
  controller.UpdateProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      tags:
        items:
          type: string
        type: array
    type: object
  controller.UpdateUserRequest:
    properties:
      address:
        $ref: '#/definitions/controller.UpdateAddressRequest'
      paymentMethod:
        $ref: '#/definitions/model.PaymentMethod'
    required:
    - address
    - paymentMethod
    type: object
  model.PaymentMethod:
    enum:
    - DEBIT_CARD
    - CREDIT_CARD
    - CASH
    type: string
    x-enum-varnames:
    - CreditCard
    - DebitCard
    - Cash
info:
  contact: {}
paths:
  /order:
    get:
      consumes:
      - application/json
      description: Show an order
      parameters:
      - description: Order identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ShowOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Show order
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create order
      tags:
      - Orders
  /orders:
    get:
      consumes:
      - application/json
      description: List all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListOrdersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List orders
      tags:
      - Orders
  /product:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Show a job product
      parameters:
      - description: Product identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ShowProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Show product
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product Identification
        in: query
        name: id
        required: true
        type: string
      - description: Product data to Update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update product
      tags:
      - Products
  /products:
    get:
      consumes:
      - application/json
      description: List all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListProductsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List products
      tags:
      - Products
  /user:
    delete:
      consumes:
      - application/json
      description: Delete an user
      parameters:
      - description: User identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Show an user
      parameters:
      - description: User identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ShowUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Show user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User Identification
        in: query
        name: id
        required: true
        type: string
      - description: User data to Update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update user
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: List all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ListUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List users
      tags:
      - Users
swagger: "2.0"
